<?xml version="1.0" encoding="UTF-8" ?>
<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration  scan="true" scanPeriod="60 seconds">
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />

    <property name="LOG_PATTERN1" value="%green([%d{HH:mm:ss.SSS}]) - %highlight([%level]) - %magenta([%thread]) - %magenta([%X{request_id}]) - %cyan([%logger]) - %yellow(%msg%n)" />
    <property name="LOG_PATTERN2" value="%green([%d{yyyy.MM.dd HH:mm:ss.SSS}]) - %clr([%level]) - %magenta([%thread]) - %magenta([%X{request_id}]) - %cyan([%-40.40logger{39}]) - %yellow(%msg%n)" />

    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern> ${LOG_PATTERN1} </pattern>
        </encoder>
    </appender>

    <!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.-->
    <springProfile name="local">
        <logger name="org.example.nexthw" level="debug" />
        <root level="info">
            <appender-ref ref="consoleAppender"/>
        </root>
    </springProfile>
    <springProfile name="dev">
        <root level="info">
            <appender-ref ref="consoleAppender"/>
        </root>
    </springProfile>
    <springProfile name="prd">
        <root level="error">
            <appender-ref ref="consoleAppender"/>
        </root>
    </springProfile>

    <!-- log4jdbc 옵션 설정 -->
    <logger name="jdbc" level="OFF"/>
    <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
    <logger name="jdbc.connection" level="OFF"/>
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
    <logger name="jdbc.sqlonly" level="OFF"/>
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
    <logger name="jdbc.sqltiming" level="DEBUG"/>
    <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
    <logger name="jdbc.audit" level="OFF"/>
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" level="OFF"/>
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" level="OFF"/>
</configuration>